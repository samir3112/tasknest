name: CI - Build, Scan and Push Docker Image

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ---- Python setup for tests + coverage ----
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install pytest coverage pytest-cov

      - name: Run tests with coverage
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)/app
          pytest --cov=app --cov-report=xml:coverage.xml

      # ---- SonarCloud Scan ----
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.python.version=3.11
            -Dsonar.sources=app
            -Dsonar.tests=tests
            -Dsonar.test.inclusions=tests/**/*.py
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.exclusions=**/venv/**,**/.venv/**,**/build/**,**/dist/**

      # ---- Docker build ----
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/tasknest-api:latest .

      # ---- Trivy scan ----
      - name: Scan with Trivy (fail on HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/tasknest-api:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

      # ---- Push Docker only if everything passes ----
      - name: Push image to DockerHub
        if: success()
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/tasknest-api:latest
